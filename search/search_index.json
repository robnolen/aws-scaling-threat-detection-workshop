{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview This workshop is designed to help you get familiar with AWS Security services and learn how to use them to identify and remediate threats in your environment. You'll be working with services such as Amazon GuardDuty (threat detection), Amazon Macie (discover, classify protect data), Amazon Inspector (vulnerability behavior analysis), AWS Security Hub (centralized security view). You will learn how to use these services to investigate threats during and after an attack, set up a notification and response pipeline, and add additional protections to improve the security posture of your environment. Level : Intermediate Duration : 2 - 3 hours CSF Functions : Detect, Respond, Recover CAF Components : Detective, Responsive Prerequisites : AWS Account, Admin IAM User Scenario Your company is new to the cloud and has recently performed a lift-and-shift of your infrastructure for piloting purposes. You are a systems administrator and have been tasked with security monitoring within your AWS environment. As part of that maintenance you are also responsible for responding to any security event in your environment. Architecture For this Workshop you will have a single instance setup in the us-west-2 region. As this was a \u201clift-and-shift\u201d migration for piloting, you have yet to build redundancy into your application, so you have a single public-facing web server. The web server has access to the Internet Gateway through an Elastic Network Interface. Customers access your web server through a DNS entry pointing to the Elastic Network Interface. You store static content in an S3 bucket and use the VPC S3 Endpoint Gateway for access from the web server. For this Workshop you will have a simple setup with a single instance setup in the us-west-2 region. As this was a \u201clift-and-shift\u201d migration for piloting, you have yet to build redundancy into your application, so you have a single public-facing web server that is accessed through an internet gateway and retrieves static content from an S3 bucket. Presentation deck Workshop Presentation Deck Region Please use the us-west-2 (Oregon) region for this workshop. Modules This workshop is broken up into the four modules below: Environment Build and Configuration Attack Simulation Detection and Remediation Review and Discussion","title":"Overview"},{"location":"#overview","text":"This workshop is designed to help you get familiar with AWS Security services and learn how to use them to identify and remediate threats in your environment. You'll be working with services such as Amazon GuardDuty (threat detection), Amazon Macie (discover, classify protect data), Amazon Inspector (vulnerability behavior analysis), AWS Security Hub (centralized security view). You will learn how to use these services to investigate threats during and after an attack, set up a notification and response pipeline, and add additional protections to improve the security posture of your environment. Level : Intermediate Duration : 2 - 3 hours CSF Functions : Detect, Respond, Recover CAF Components : Detective, Responsive Prerequisites : AWS Account, Admin IAM User","title":"Overview"},{"location":"#scenario","text":"Your company is new to the cloud and has recently performed a lift-and-shift of your infrastructure for piloting purposes. You are a systems administrator and have been tasked with security monitoring within your AWS environment. As part of that maintenance you are also responsible for responding to any security event in your environment.","title":"Scenario"},{"location":"#architecture","text":"For this Workshop you will have a single instance setup in the us-west-2 region. As this was a \u201clift-and-shift\u201d migration for piloting, you have yet to build redundancy into your application, so you have a single public-facing web server. The web server has access to the Internet Gateway through an Elastic Network Interface. Customers access your web server through a DNS entry pointing to the Elastic Network Interface. You store static content in an S3 bucket and use the VPC S3 Endpoint Gateway for access from the web server. For this Workshop you will have a simple setup with a single instance setup in the us-west-2 region. As this was a \u201clift-and-shift\u201d migration for piloting, you have yet to build redundancy into your application, so you have a single public-facing web server that is accessed through an internet gateway and retrieves static content from an S3 bucket.","title":"Architecture"},{"location":"#presentation-deck","text":"Workshop Presentation Deck","title":"Presentation deck"},{"location":"#region","text":"Please use the us-west-2 (Oregon) region for this workshop.","title":"Region"},{"location":"#modules","text":"This workshop is broken up into the four modules below: Environment Build and Configuration Attack Simulation Detection and Remediation Review and Discussion","title":"Modules"},{"location":"01-environment-setup/","text":"Module 1: Environment build and configuration In this first module you will be configuring detective and responsive controls for your environment. You will be running the first of two CloudFormation templates which will automate the creation of some of these controls and then you will manually configure the rest. Log into the AWS Console if you have not done so already. Agenda Run the intial CloudFormation Template \u2013 5 min Confirm SNS subscription in your email - 1 min Create a CloudWatch Rule - 5 min Manually Enable detective controls - 5 min Deploy the AWS CloudFormation template To initiate the scenario and configure your environment you will need to run the module 1 CloudFormation template: Before you deploy the CloudFormation template feel free to view it here . Region Deploy US West 2 (Oregon) Click the Deploy to AWS button above. This will automatically take you to the console to run the template, click Next to get to the Specify Details page. On the Specify Details section enter the necessary parameters as shown below. Parameter Value Stack name ThreatDetectionWksp-Env-Setup Email Address Any valid email address you have access to Once you have entered your parameters click Next , Click Next again. (leave everything on this page at the default) Finally, scroll down and check the box to acknowledge that the template will create IAM roles and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE status as shown below. Do not forget to check your email! You will get an email from SNS asking you to confirm the Subscription. Confirm the subscription so you can receive email alerts from AWS services during the workshop. The email may take 2-3 minutes to arrive, check your spam/junk folder if it doesn\u2019t arrive within that timeframe. Setup Amazon CloudWatch event rules and automatic response The CloudFormation template you just ran created CloudWatch Event Rules for alerting and response purposes. The steps below will walk you through creating the final rule. After this you'll have rules in place to receive email notifications and trigger AWS Lambda functions to respond to threats. Below are steps to create a rule through the console but you can also find out more about doing it programmatically by reviewing the Amazon GuardDuty Documentation . Open the CloudWatch console (us-west-2) In the navigation pane on the left, under Events , click Rules What are the current Rules in place setup to do? Click Create Rule Select Event Pattern click the dropdown labeled Build event pattern to match events by service and select Custom event pattern in the drop down. Copy and paste in the custom event pattern below: { source : [ aws.guardduty ], detail : { type : [ UnauthorizedAccess:EC2/MaliciousIPCaller.Custom ] } } For Targets , click Add Target , select Lambda Function , and then select threat-detection-wksp-remediation-nacl . Click Configure details at the bottom. On the Configure rule details screen fill out the Name and Description (suggestions below). Name: threat-detection-wksp-guardduty-finding-ec2-maliciousip Description: GuardDuty Finding: UnauthorizedAccess:EC2/MaliciousIPCaller.Custom Click Create rule . Optional: Consider examining the Lambda function to see what it does. Open the Lambda console . Click on the function named threat-detection-wksp-remediation-nacl What will the function do when invoked? Enable Amazon GuardDuty The next step is to enable Amazon GuardDuty, which will continuously monitor your environment for malicious or unauthorized behavior. Go to the Amazon GuardDuty console (us-west-2). Click the Get Started button. On the next screen click the Enable GuardDuty button. GuardDuty is now enabled and continuously monitoring your CloudTrail logs, VPC flow logs, and DNS Query logs for threats in your environment. Enable AWS Security Hub Now that all of your detective controls have been configured you need to enable AWS Security Hub , which will provide you with a comprehensive view of the security and compliance of your AWS environment. Go to the AWS Security Hub console. Click the Enable Security Hub button. On the next screen click the Enable AWS Security Hub button. AWS Security Hub is now enabled and will begin collecting and aggregating findings from the security services we have enabled so far. Architecture overview Your environment is now configured and ready for operations. Below is a diagram to depict the detective controls you now have in place. After you have successfully setup your environment, you can proceed to the next module.","title":"Module 1: Environment Build"},{"location":"01-environment-setup/#module-1-environment-build-and-configuration","text":"In this first module you will be configuring detective and responsive controls for your environment. You will be running the first of two CloudFormation templates which will automate the creation of some of these controls and then you will manually configure the rest. Log into the AWS Console if you have not done so already. Agenda Run the intial CloudFormation Template \u2013 5 min Confirm SNS subscription in your email - 1 min Create a CloudWatch Rule - 5 min Manually Enable detective controls - 5 min","title":"Module 1: Environment build and configuration"},{"location":"01-environment-setup/#deploy-the-aws-cloudformation-template","text":"To initiate the scenario and configure your environment you will need to run the module 1 CloudFormation template: Before you deploy the CloudFormation template feel free to view it here . Region Deploy US West 2 (Oregon) Click the Deploy to AWS button above. This will automatically take you to the console to run the template, click Next to get to the Specify Details page. On the Specify Details section enter the necessary parameters as shown below. Parameter Value Stack name ThreatDetectionWksp-Env-Setup Email Address Any valid email address you have access to Once you have entered your parameters click Next , Click Next again. (leave everything on this page at the default) Finally, scroll down and check the box to acknowledge that the template will create IAM roles and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE status as shown below. Do not forget to check your email! You will get an email from SNS asking you to confirm the Subscription. Confirm the subscription so you can receive email alerts from AWS services during the workshop. The email may take 2-3 minutes to arrive, check your spam/junk folder if it doesn\u2019t arrive within that timeframe.","title":"Deploy the AWS CloudFormation template"},{"location":"01-environment-setup/#setup-amazon-cloudwatch-event-rules-and-automatic-response","text":"The CloudFormation template you just ran created CloudWatch Event Rules for alerting and response purposes. The steps below will walk you through creating the final rule. After this you'll have rules in place to receive email notifications and trigger AWS Lambda functions to respond to threats. Below are steps to create a rule through the console but you can also find out more about doing it programmatically by reviewing the Amazon GuardDuty Documentation . Open the CloudWatch console (us-west-2) In the navigation pane on the left, under Events , click Rules What are the current Rules in place setup to do? Click Create Rule Select Event Pattern click the dropdown labeled Build event pattern to match events by service and select Custom event pattern in the drop down. Copy and paste in the custom event pattern below: { source : [ aws.guardduty ], detail : { type : [ UnauthorizedAccess:EC2/MaliciousIPCaller.Custom ] } } For Targets , click Add Target , select Lambda Function , and then select threat-detection-wksp-remediation-nacl . Click Configure details at the bottom. On the Configure rule details screen fill out the Name and Description (suggestions below). Name: threat-detection-wksp-guardduty-finding-ec2-maliciousip Description: GuardDuty Finding: UnauthorizedAccess:EC2/MaliciousIPCaller.Custom Click Create rule . Optional: Consider examining the Lambda function to see what it does. Open the Lambda console . Click on the function named threat-detection-wksp-remediation-nacl What will the function do when invoked?","title":"Setup Amazon CloudWatch event rules and automatic response"},{"location":"01-environment-setup/#enable-amazon-guardduty","text":"The next step is to enable Amazon GuardDuty, which will continuously monitor your environment for malicious or unauthorized behavior. Go to the Amazon GuardDuty console (us-west-2). Click the Get Started button. On the next screen click the Enable GuardDuty button. GuardDuty is now enabled and continuously monitoring your CloudTrail logs, VPC flow logs, and DNS Query logs for threats in your environment.","title":"Enable Amazon GuardDuty"},{"location":"01-environment-setup/#enable-aws-security-hub","text":"Now that all of your detective controls have been configured you need to enable AWS Security Hub , which will provide you with a comprehensive view of the security and compliance of your AWS environment. Go to the AWS Security Hub console. Click the Enable Security Hub button. On the next screen click the Enable AWS Security Hub button. AWS Security Hub is now enabled and will begin collecting and aggregating findings from the security services we have enabled so far.","title":"Enable AWS Security Hub"},{"location":"01-environment-setup/#architecture-overview","text":"Your environment is now configured and ready for operations. Below is a diagram to depict the detective controls you now have in place. After you have successfully setup your environment, you can proceed to the next module.","title":"Architecture overview"},{"location":"02-attack-simulation/","text":"Module 2: Attack Simulation Now that you have detective and responsive controls setup, you'll be running another CloudFormation template which will simulate the actual attack you will be investigating. Agenda Run the second CloudFormation template \u2013 5 min Threat detection and response presentation \u2013 25 min Deploy the CloudFormation template To initiate the attack simulation you will need to run the module 2 CloudFormation template: Before you deploy the CloudFormation template feel free to view it repo . Region Deploy US West 2 (Oregon) Click the Deploy to AWS button above. This will automatically take you to the console to run the template. The name of the stack will be automatically populated but you are free to change it, after which click Next , then Next again (leave everything on this page at the default). Finally, acknowledge that the template will create IAM roles and click Create This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE status as shown below. If this fails with the error message [IAM_CAPABILITY] , please acknowledge that the template will create IAM roles, from the previous step Architecture overview Below is a diagram of the setup after the module 2 CloudFormation stack is created. Threat detection and response presentation AWS Sponsored Event : If you are going through this workshop in a classroom setting then wait till the presentation is over before starting module 3 (the presentation will allow enough time to pass for the attack scenario to complete.) Individual : If you are going through this workshop outside of a classroom setting you can proceed to Module 3. Please note it will take at least 20 minutes after the 2nd CloudFormation template has completed before you will start seeing findings.","title":"Module 2: Attack Simulation"},{"location":"02-attack-simulation/#module-2-attack-simulation","text":"Now that you have detective and responsive controls setup, you'll be running another CloudFormation template which will simulate the actual attack you will be investigating. Agenda Run the second CloudFormation template \u2013 5 min Threat detection and response presentation \u2013 25 min","title":"Module 2: Attack Simulation"},{"location":"02-attack-simulation/#deploy-the-cloudformation-template","text":"To initiate the attack simulation you will need to run the module 2 CloudFormation template: Before you deploy the CloudFormation template feel free to view it repo . Region Deploy US West 2 (Oregon) Click the Deploy to AWS button above. This will automatically take you to the console to run the template. The name of the stack will be automatically populated but you are free to change it, after which click Next , then Next again (leave everything on this page at the default). Finally, acknowledge that the template will create IAM roles and click Create This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE status as shown below. If this fails with the error message [IAM_CAPABILITY] , please acknowledge that the template will create IAM roles, from the previous step","title":"Deploy the CloudFormation template"},{"location":"02-attack-simulation/#architecture-overview","text":"Below is a diagram of the setup after the module 2 CloudFormation stack is created. Threat detection and response presentation AWS Sponsored Event : If you are going through this workshop in a classroom setting then wait till the presentation is over before starting module 3 (the presentation will allow enough time to pass for the attack scenario to complete.) Individual : If you are going through this workshop outside of a classroom setting you can proceed to Module 3. Please note it will take at least 20 minutes after the 2nd CloudFormation template has completed before you will start seeing findings.","title":"Architecture overview"},{"location":"03-detection-and-remediation/","text":"Agenda Compromised AWS IAM credentials ~ 25-40 mins Compromised EC2 instance ~ 25-40 mins Compromised S3 bucket ~ 15-25 mins Module 3: Detect, Investigate Respond Unfortunately, due to a misconfiguration in your environment, an attacker may have been able to gain access to the web server. You are getting alerts from the security services you\u2019ve put in place indicating malicious activity. These alerts include communication with known malicious IP addresses, account reconnaissance, changes to an Amazon S3 bucket configuration, and disabling security configurations. You must identify what activity the intruder may have performed and how they did it so you can block the intruder\u2019s access, remediate the vulnerabilities, and restore the configuration to its proper state. Part 1 - Compromised AWS IAM credentials Detect and investigate By now you\u2019ve received email alerts from the security services you enabled. Now what? As part of your risk driven detection strategy your organization has decided to prioritize AWS IAM related findings. Sort through your email alerts and identity an alert related to an AWS IAM principal Amazon GuardDuty Finding: UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom Copy the Access Key ID from the e-mail alert. Explore findings related to the access key (Amazon GuardDuty) Now that you have a resource identifier to pivot from you can use Amazon GuardDuty to start doing an initial investigation into these findings. Go to the Amazon GuardDuty console (us-west-2). Click in the Add filter criteria box, select Access Key ID , and then paste in the Access Key ID you copied from the e-mail, then select Apply . What findings do you see related to this Access Key ID? Click on one of the findings to see the details. What principal are these credentials associated with? Examining User type under Resource affected you can see that the access key referenced in this finding is from an IAM assumed role. Examining Principal ID under Resource affected you will find two strings separated by a colon. The first is the unique ID for the IAM role and the second is the EC2 instance ID. You may have to resize your screen by dragging the middle vertical scrollbar to the left to see the entire text The Principal ID contains a unique ID for the entity making the API request, and when the request is made using temporary security credentials (which is what happens for an assume role call) it also includes a session name. In this case the session name is the EC2 instance ID since the assume role call was done using an IAM role for EC2. Copy the full Principal Id which contains both the unique ID of the role and the session name: \"principalId\": \" unique ID : session name \" Examine the User Name under Resource affected and copy it down. This corresponds to the name of the IAM role involved since the temp creds used to make the API call came from EC2 instance with an IAM role attached. Respond Now that you have identified that a temporary security credential from an IAM role for EC2 is being used by an attacker, the decision has been made to rotate the credential immediately to prevent any further misuse or potential privilege escalation. Revoke the IAM role sessions (IAM) Browse to the AWS IAM console. Click Roles and find the role you identified in the previous section using the User Name you copied down earlier (this is the role attached to the compromised instance), and click on that User Name . Click on the Revoke sessions tab. Click on Revoke active sessions . Click the acknowledgement check box and then click Revoke active sessions . What is the mechanism that is put in place by this step to actually prevent the use of the temporary security credentials issued by this role? Restart the EC2 instance to rotate the access keys (EC2) All active credentials for the compromised IAM role have been invalidated. This means the attacker can no longer use those access keys, but it also means that any applications that use this role can't as well. You knew this going in but decided it was necessary due to the high risk of a compromised IAM access key. In order to ensure the availability of your application you need to refresh the access keys on the instance by stopping and starting the instance. A simple reboot will not change the keys. If you waited the temporary security credential on the instance would be refreshed but this procedure will speed things up. Since you are using AWS Systems Manager for administration on your EC2 instances you can use it to query the metadata to validate that the access keys were rotated after the instance restart. In the EC2 console Stop the Instance named threat-detection-wksp: Compromised Instance . Check the box next to the instance, select the Actions menu , Instance State , Stop , confirm by pressing Yes , Stop Wait for the Instance State to say stopped under Instance State (you may need to refresh the EC2 console) and then Start the instance. You will need to wait until all Status Checks have passed before continuing. Verify the access keys have been rotated (Systems Manager) Go to AWS Systems Manager console and click on Session Manager on the left navigation and then click Start Session . You should see an instance named threat-detection-wksp: Compromised Instance with a Instance state of running . To see the credentials currently active on the instance, click on the radio button next to threat-detection-wksp: Compromised Instance and click Start Session . Run the following command in the shell and compare the access key ID to the one found in the email alerts to ensure it has changed: curl http://169.254.169.254/latest/meta-data/iam/security-credentials/threat-detection-wksp-compromised-ec2 Why would this scenario be a good use case for auto-scaling groups? At this point you've successfully revoked all the active sessions from AWS IAM role and rotated the temporary security credentials on the EC2 instance. Part 2 - Compromised EC2 instance Detect and investigate Now that you've addressed the compromised IAM credential you need focus in on how the attacker was able to compromise the EC2 instance. It's this compromise which allowed them to query the instance metadata and steal the credentials. Explore findings related to the instance ID (AWS Security Hub) When investigating the compromised IAM credential you discovered that it was from an IAM role for EC2 and identified the EC2 instance ID from the principal ID of the finding. Using the instance ID (that you previously copied, it starts with an \u2018i\u2019, such as i-08fa26ffb15a66f5a) you can use AWS Security Hub to start investigating the findings. To start, you are going to research the GuardDuty findings related to the EC2 instance. Go to the AWS Security Hub console. The link should take you to the Findings section (if not, click on Findings in the navigation on the left). Add a filter by clicking in the Add filter box and scrolling down to Product Name , and paste in the word GuardDuty . Use your browser's find function Control-F and paste in the Instance ID you copied earlier (from the principal ID you gathered in the GuardDuty finding). Now copy the Amazon Resource Name (ARN) from the Resource ID for the first match. The ARN will look something like this arn:aws:ec2:us-west-2:166199753942:instance/i-0efc5172a5d7ecc6b Add one more filter by clicking the Add filter box again and selecting Resource ID and paste in the ARN from the previous step What GuardDuty findings do you see related to this instance ID? One of the findings should indicate that the EC2 instance is communicating with an IP address on a threat list ( disallowed IP ) which adds further evidence to the conclusion that the instance has been compromised. The other finding should indicate that a system at a particular IP address is performing an SSH brute force attack against your instance. You now need to investigate if the SSH brute force attack was successful and if that is what allowed the attacker to gain access to the instance. Determine if ssh password authentication is enabled on the EC2 instance (AWS Security Hub) Automated responses to threats can do many things. For example, you could have an trigger that helps gather information about the threat that could then be used in the investigation by the security team. With that option in mind, we have a CloudWatch event rule in place that will trigger an Amazon Inspector scan of an EC2 instance when GuardDuty detects a particular attack. We will use AWS Security Hub to view the findings from Inspector. We want to determine if the SSH configuration adheres to best practices. Go to the AWS Security Hub console. The link should take you to the Findings section (if not, click on Findings in the navigation on the left). Add a filter by clicking in the Add filter box and scrolling down to Product Name , and paste in the word Inspector . Use your browser's find function Control-F and paste in password authentication over SSH The finding may not be on the first page of findings, use the to move to the next page. Click on the finding regarding SSH and password authentication for the instance that experienced the SSH brute force attack and review. If you do not see any findings after a while, there may have been an issue with your Inspector agent. Go to the Inspector console, click on Assessment Templates , check the template that starts with threat-detection-wksp , and click Run . Please allow 15 minutes for the scan to complete. You can also look in Assessment runs and check the status . Feel free to continue through this module and check the results later on. After review you should see that password authentication over SSH is configured on the instance. In addition, if you examine some of the other Inspector findings you will see that there are no password complexity restrictions. This means the instance is more susceptible to an SSH brute force attack. Determine if the attacker was able to login to the EC2 instance (CloudWatch logs) Now that we know that the instance was more susceptible to an SSH brute force attack, let\u2019s look at the CloudWatch logs and create a metric to see if there were any successful SSH logins (to finally answer the question of whether the SSH brute force attack was successful.) Your corporate policy is to send security certain logs from EC2 instances to CloudWatch. Go to CloudWatch logs . Click on the log group /threat-detection-wksp/var/log/secure If you have multiple log streams, filter using the Instance ID you copied earlier and click on the stream. Within the Filter Events text box put the following Filter Pattern: [Mon, day, timestamp, ip, id, msg1= Invalid, msg2 = user, ...] Do you see any failed (invalid user) attempts to log into the instance? Would that be consistent with an SSH brute force attack? Now replace the Filter with one for successful attempts: [Mon, day, timestamp, ip, id, msg1= Accepted, msg2 = password, ...] Do you see any successful attempts to log into the instance? Which linux user was compromised? Respond Modify the EC2 security group (EC2) The active session from the attacker was automatically stopped by an update to the NACL on the subnet where the instance resides. This was done by a CloudWatch event rule trigger that is invoked based on certain GuardDuty findings. You've decided that all administration on EC2 Instances will be done through AWS Systems Manager so you no longer need administrative ports open so a good next step would be to modify the security group associated with the EC2 instance to prevent the attacker or anyone else from connecting. Go to the Amazon EC2 Console. Find the running instances with the name threat-detection-wksp: Compromised Instance . Under the Description tab, click on the Security Group for the compromised instance. View the rules under the Inbound tab. Click Edit and delete the inbound SSH rule. The SSM Agent was installed on your EC2 Instance during the initial configuration. Click Save Part 3 - Compromised S3 bucket Detect and investigate Now that we know the SSH brute force attack was successful and we disabled the IAM credentials that were stolen, we need to determine if anything else occurred. One step we could take here is to examine the IAM policy attached the IAM role that generated the temp credentials. We notice in the policy that there are permissions relating to the Amazon S3 service so that is something to keep in mind as you continue the investigation. Here is a truncated view of the policy from the IAM role attached to the compromised EC2 instance: { Version : 2012-10-17 , Statement : [ { Action : s3:PutObject , Resource : arn:aws:s3:::threat-detection-wksp-ACCOUNT_ID-us-west-2-gd-threatlist/* , Effect : Allow }, { Action : [ s3:* ], Resource : arn:aws:s3:::threat-detection-wksp-ACCOUNT_ID-us-west-2-data/* , Effect : Allow }, { Action : [ s3:* ], Resource : arn:aws:s3:::threat-detection-wksp-ACCOUNT_ID-us-west-2-data , Effect : Allow } ] } Investigate any S3 related findings (AWS Security Hub) There are many ways to approach this next step. We are going to start with a Security Hub insight that may be helpful in situations like this. This is not the only way you could approach this but it can definitely save time initially as you investigate the full repercussions of an attack. Go to AWS Security Hub in the AWS Management Console. The link should take you to the Insights section (if not, click on Insights in the navigation on the left). Click in the Filter insights box and type Top S3 which will display the built in Insight \"Top S3 buckets by counts of findings.\" Click on that Insight. There should be one that with threat-detection-wksp- and ends in -data . Click on that. Evaluate the Macie findings shown under the Insight. This Security Hub Insight is one way of determining what an attacker may have done. It is not going to help in every situation though. Check if sensitive data was involved (Macie) At this point you know how the attacker was able to get into your systems and a general idea of what they did. In the previous step you determined that the S3 bucket that starts with threat-detection-wksp- and ends in -data has an ACL that grants global read rights. We will now check if there is any sensitive and business-critical data in the bucket and take a closer at the Macie Alerts. Go to the Amazon Macie in the AWS Management console. Click Dashboard on the left navigation. You should see the following data classifications: You can slide the risk slider to filter data classifications based on risk levels. Above the risk slider, click the icon for S3 public objects and buckets . The icon will be in the shape of a globe but you can also hover over the icons to find the right one. Click the magnifying glass to the left of the bucket name listed. Check if any of the data in the bucket is considered a high risk. Look for the Object PII priority field and Object risk level field. Verify if any of the data is unencrypted. Look for the Object encryption field. Does a portion of the blue bar indicate that encryption is set to none?. Respond Fix the permissions and encryption on the bucket (S3) In the previous step we determined that the S3 bucket that starts with threat-detection-wksp- and ends in -data has sensitive data and some of that data is unencrypted. We also know that the bucket grants global read rights. We need to manually fix these issues. First we will fix the permissions. Go to Amazon S3 in the AWS Management Console. Find the bucket that starts with threat-detection-wksp- and ends in -data Click on the Permissions tab then click on ACL Control List Under Public access click on the radio button next to Everyone . Uncheck List objects then click Save . Now we need to fix the encryption. In the same bucket, click on the Properties tab then click on Default encryption Set the encryption to AWS-KMS. Select the aws/s3 key. Finally click Save . What impact does enabling default encryption have on existing objects in the bucket? Congratulations! You have successfully remediated the incident and further hardened your environment. This is obviously a simulation and we can not cover every aspect of the response function in the short time allotted but hopefully this gave you an idea of the capabilities available on AWS to detect, investigate and respond to threats and attacks. Here is a diagram of the attack you just investigated. Numbers 1 2 show the SSH brute force attack and successful SSH login. Number 3 shows the S3 bucket changes the attacker made. Number 4 shows the API calls the attacker made with the IAM temporary credentials stolen from the compromised EC2 instance. If you are going through this workshop in a classroom setting then the instructor should start the module 4 presentation soon.","title":"Module 3: Detect & Respond"},{"location":"03-detection-and-remediation/#agenda","text":"Compromised AWS IAM credentials ~ 25-40 mins Compromised EC2 instance ~ 25-40 mins Compromised S3 bucket ~ 15-25 mins","title":"Agenda"},{"location":"03-detection-and-remediation/#module-3-detect-investigate-respond","text":"Unfortunately, due to a misconfiguration in your environment, an attacker may have been able to gain access to the web server. You are getting alerts from the security services you\u2019ve put in place indicating malicious activity. These alerts include communication with known malicious IP addresses, account reconnaissance, changes to an Amazon S3 bucket configuration, and disabling security configurations. You must identify what activity the intruder may have performed and how they did it so you can block the intruder\u2019s access, remediate the vulnerabilities, and restore the configuration to its proper state.","title":"Module 3: Detect, Investigate &amp; Respond"},{"location":"03-detection-and-remediation/#part-1-compromised-aws-iam-credentials","text":"","title":"Part 1 - Compromised AWS IAM credentials"},{"location":"03-detection-and-remediation/#detect-and-investigate","text":"By now you\u2019ve received email alerts from the security services you enabled. Now what? As part of your risk driven detection strategy your organization has decided to prioritize AWS IAM related findings. Sort through your email alerts and identity an alert related to an AWS IAM principal Amazon GuardDuty Finding: UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom Copy the Access Key ID from the e-mail alert. Explore findings related to the access key (Amazon GuardDuty) Now that you have a resource identifier to pivot from you can use Amazon GuardDuty to start doing an initial investigation into these findings. Go to the Amazon GuardDuty console (us-west-2). Click in the Add filter criteria box, select Access Key ID , and then paste in the Access Key ID you copied from the e-mail, then select Apply . What findings do you see related to this Access Key ID? Click on one of the findings to see the details. What principal are these credentials associated with? Examining User type under Resource affected you can see that the access key referenced in this finding is from an IAM assumed role. Examining Principal ID under Resource affected you will find two strings separated by a colon. The first is the unique ID for the IAM role and the second is the EC2 instance ID. You may have to resize your screen by dragging the middle vertical scrollbar to the left to see the entire text The Principal ID contains a unique ID for the entity making the API request, and when the request is made using temporary security credentials (which is what happens for an assume role call) it also includes a session name. In this case the session name is the EC2 instance ID since the assume role call was done using an IAM role for EC2. Copy the full Principal Id which contains both the unique ID of the role and the session name: \"principalId\": \" unique ID : session name \" Examine the User Name under Resource affected and copy it down. This corresponds to the name of the IAM role involved since the temp creds used to make the API call came from EC2 instance with an IAM role attached.","title":"Detect and investigate"},{"location":"03-detection-and-remediation/#respond","text":"Now that you have identified that a temporary security credential from an IAM role for EC2 is being used by an attacker, the decision has been made to rotate the credential immediately to prevent any further misuse or potential privilege escalation. Revoke the IAM role sessions (IAM) Browse to the AWS IAM console. Click Roles and find the role you identified in the previous section using the User Name you copied down earlier (this is the role attached to the compromised instance), and click on that User Name . Click on the Revoke sessions tab. Click on Revoke active sessions . Click the acknowledgement check box and then click Revoke active sessions . What is the mechanism that is put in place by this step to actually prevent the use of the temporary security credentials issued by this role? Restart the EC2 instance to rotate the access keys (EC2) All active credentials for the compromised IAM role have been invalidated. This means the attacker can no longer use those access keys, but it also means that any applications that use this role can't as well. You knew this going in but decided it was necessary due to the high risk of a compromised IAM access key. In order to ensure the availability of your application you need to refresh the access keys on the instance by stopping and starting the instance. A simple reboot will not change the keys. If you waited the temporary security credential on the instance would be refreshed but this procedure will speed things up. Since you are using AWS Systems Manager for administration on your EC2 instances you can use it to query the metadata to validate that the access keys were rotated after the instance restart. In the EC2 console Stop the Instance named threat-detection-wksp: Compromised Instance . Check the box next to the instance, select the Actions menu , Instance State , Stop , confirm by pressing Yes , Stop Wait for the Instance State to say stopped under Instance State (you may need to refresh the EC2 console) and then Start the instance. You will need to wait until all Status Checks have passed before continuing. Verify the access keys have been rotated (Systems Manager) Go to AWS Systems Manager console and click on Session Manager on the left navigation and then click Start Session . You should see an instance named threat-detection-wksp: Compromised Instance with a Instance state of running . To see the credentials currently active on the instance, click on the radio button next to threat-detection-wksp: Compromised Instance and click Start Session . Run the following command in the shell and compare the access key ID to the one found in the email alerts to ensure it has changed: curl http://169.254.169.254/latest/meta-data/iam/security-credentials/threat-detection-wksp-compromised-ec2 Why would this scenario be a good use case for auto-scaling groups? At this point you've successfully revoked all the active sessions from AWS IAM role and rotated the temporary security credentials on the EC2 instance.","title":"Respond"},{"location":"03-detection-and-remediation/#part-2-compromised-ec2-instance","text":"","title":"Part 2 - Compromised EC2 instance"},{"location":"03-detection-and-remediation/#detect-and-investigate_1","text":"Now that you've addressed the compromised IAM credential you need focus in on how the attacker was able to compromise the EC2 instance. It's this compromise which allowed them to query the instance metadata and steal the credentials. Explore findings related to the instance ID (AWS Security Hub) When investigating the compromised IAM credential you discovered that it was from an IAM role for EC2 and identified the EC2 instance ID from the principal ID of the finding. Using the instance ID (that you previously copied, it starts with an \u2018i\u2019, such as i-08fa26ffb15a66f5a) you can use AWS Security Hub to start investigating the findings. To start, you are going to research the GuardDuty findings related to the EC2 instance. Go to the AWS Security Hub console. The link should take you to the Findings section (if not, click on Findings in the navigation on the left). Add a filter by clicking in the Add filter box and scrolling down to Product Name , and paste in the word GuardDuty . Use your browser's find function Control-F and paste in the Instance ID you copied earlier (from the principal ID you gathered in the GuardDuty finding). Now copy the Amazon Resource Name (ARN) from the Resource ID for the first match. The ARN will look something like this arn:aws:ec2:us-west-2:166199753942:instance/i-0efc5172a5d7ecc6b Add one more filter by clicking the Add filter box again and selecting Resource ID and paste in the ARN from the previous step What GuardDuty findings do you see related to this instance ID? One of the findings should indicate that the EC2 instance is communicating with an IP address on a threat list ( disallowed IP ) which adds further evidence to the conclusion that the instance has been compromised. The other finding should indicate that a system at a particular IP address is performing an SSH brute force attack against your instance. You now need to investigate if the SSH brute force attack was successful and if that is what allowed the attacker to gain access to the instance. Determine if ssh password authentication is enabled on the EC2 instance (AWS Security Hub) Automated responses to threats can do many things. For example, you could have an trigger that helps gather information about the threat that could then be used in the investigation by the security team. With that option in mind, we have a CloudWatch event rule in place that will trigger an Amazon Inspector scan of an EC2 instance when GuardDuty detects a particular attack. We will use AWS Security Hub to view the findings from Inspector. We want to determine if the SSH configuration adheres to best practices. Go to the AWS Security Hub console. The link should take you to the Findings section (if not, click on Findings in the navigation on the left). Add a filter by clicking in the Add filter box and scrolling down to Product Name , and paste in the word Inspector . Use your browser's find function Control-F and paste in password authentication over SSH The finding may not be on the first page of findings, use the to move to the next page. Click on the finding regarding SSH and password authentication for the instance that experienced the SSH brute force attack and review. If you do not see any findings after a while, there may have been an issue with your Inspector agent. Go to the Inspector console, click on Assessment Templates , check the template that starts with threat-detection-wksp , and click Run . Please allow 15 minutes for the scan to complete. You can also look in Assessment runs and check the status . Feel free to continue through this module and check the results later on. After review you should see that password authentication over SSH is configured on the instance. In addition, if you examine some of the other Inspector findings you will see that there are no password complexity restrictions. This means the instance is more susceptible to an SSH brute force attack. Determine if the attacker was able to login to the EC2 instance (CloudWatch logs) Now that we know that the instance was more susceptible to an SSH brute force attack, let\u2019s look at the CloudWatch logs and create a metric to see if there were any successful SSH logins (to finally answer the question of whether the SSH brute force attack was successful.) Your corporate policy is to send security certain logs from EC2 instances to CloudWatch. Go to CloudWatch logs . Click on the log group /threat-detection-wksp/var/log/secure If you have multiple log streams, filter using the Instance ID you copied earlier and click on the stream. Within the Filter Events text box put the following Filter Pattern: [Mon, day, timestamp, ip, id, msg1= Invalid, msg2 = user, ...] Do you see any failed (invalid user) attempts to log into the instance? Would that be consistent with an SSH brute force attack? Now replace the Filter with one for successful attempts: [Mon, day, timestamp, ip, id, msg1= Accepted, msg2 = password, ...] Do you see any successful attempts to log into the instance? Which linux user was compromised?","title":"Detect and investigate"},{"location":"03-detection-and-remediation/#respond_1","text":"Modify the EC2 security group (EC2) The active session from the attacker was automatically stopped by an update to the NACL on the subnet where the instance resides. This was done by a CloudWatch event rule trigger that is invoked based on certain GuardDuty findings. You've decided that all administration on EC2 Instances will be done through AWS Systems Manager so you no longer need administrative ports open so a good next step would be to modify the security group associated with the EC2 instance to prevent the attacker or anyone else from connecting. Go to the Amazon EC2 Console. Find the running instances with the name threat-detection-wksp: Compromised Instance . Under the Description tab, click on the Security Group for the compromised instance. View the rules under the Inbound tab. Click Edit and delete the inbound SSH rule. The SSM Agent was installed on your EC2 Instance during the initial configuration. Click Save","title":"Respond"},{"location":"03-detection-and-remediation/#part-3-compromised-s3-bucket","text":"","title":"Part 3 - Compromised S3 bucket"},{"location":"03-detection-and-remediation/#detect-and-investigate_2","text":"Now that we know the SSH brute force attack was successful and we disabled the IAM credentials that were stolen, we need to determine if anything else occurred. One step we could take here is to examine the IAM policy attached the IAM role that generated the temp credentials. We notice in the policy that there are permissions relating to the Amazon S3 service so that is something to keep in mind as you continue the investigation. Here is a truncated view of the policy from the IAM role attached to the compromised EC2 instance: { Version : 2012-10-17 , Statement : [ { Action : s3:PutObject , Resource : arn:aws:s3:::threat-detection-wksp-ACCOUNT_ID-us-west-2-gd-threatlist/* , Effect : Allow }, { Action : [ s3:* ], Resource : arn:aws:s3:::threat-detection-wksp-ACCOUNT_ID-us-west-2-data/* , Effect : Allow }, { Action : [ s3:* ], Resource : arn:aws:s3:::threat-detection-wksp-ACCOUNT_ID-us-west-2-data , Effect : Allow } ] } Investigate any S3 related findings (AWS Security Hub) There are many ways to approach this next step. We are going to start with a Security Hub insight that may be helpful in situations like this. This is not the only way you could approach this but it can definitely save time initially as you investigate the full repercussions of an attack. Go to AWS Security Hub in the AWS Management Console. The link should take you to the Insights section (if not, click on Insights in the navigation on the left). Click in the Filter insights box and type Top S3 which will display the built in Insight \"Top S3 buckets by counts of findings.\" Click on that Insight. There should be one that with threat-detection-wksp- and ends in -data . Click on that. Evaluate the Macie findings shown under the Insight. This Security Hub Insight is one way of determining what an attacker may have done. It is not going to help in every situation though. Check if sensitive data was involved (Macie) At this point you know how the attacker was able to get into your systems and a general idea of what they did. In the previous step you determined that the S3 bucket that starts with threat-detection-wksp- and ends in -data has an ACL that grants global read rights. We will now check if there is any sensitive and business-critical data in the bucket and take a closer at the Macie Alerts. Go to the Amazon Macie in the AWS Management console. Click Dashboard on the left navigation. You should see the following data classifications: You can slide the risk slider to filter data classifications based on risk levels. Above the risk slider, click the icon for S3 public objects and buckets . The icon will be in the shape of a globe but you can also hover over the icons to find the right one. Click the magnifying glass to the left of the bucket name listed. Check if any of the data in the bucket is considered a high risk. Look for the Object PII priority field and Object risk level field. Verify if any of the data is unencrypted. Look for the Object encryption field. Does a portion of the blue bar indicate that encryption is set to none?.","title":"Detect and investigate"},{"location":"03-detection-and-remediation/#respond_2","text":"Fix the permissions and encryption on the bucket (S3) In the previous step we determined that the S3 bucket that starts with threat-detection-wksp- and ends in -data has sensitive data and some of that data is unencrypted. We also know that the bucket grants global read rights. We need to manually fix these issues. First we will fix the permissions. Go to Amazon S3 in the AWS Management Console. Find the bucket that starts with threat-detection-wksp- and ends in -data Click on the Permissions tab then click on ACL Control List Under Public access click on the radio button next to Everyone . Uncheck List objects then click Save . Now we need to fix the encryption. In the same bucket, click on the Properties tab then click on Default encryption Set the encryption to AWS-KMS. Select the aws/s3 key. Finally click Save . What impact does enabling default encryption have on existing objects in the bucket? Congratulations! You have successfully remediated the incident and further hardened your environment. This is obviously a simulation and we can not cover every aspect of the response function in the short time allotted but hopefully this gave you an idea of the capabilities available on AWS to detect, investigate and respond to threats and attacks. Here is a diagram of the attack you just investigated. Numbers 1 2 show the SSH brute force attack and successful SSH login. Number 3 shows the S3 bucket changes the attacker made. Number 4 shows the API calls the attacker made with the IAM temporary credentials stolen from the compromised EC2 instance. If you are going through this workshop in a classroom setting then the instructor should start the module 4 presentation soon.","title":"Respond"},{"location":"04-review-and-discussion/","text":"Module 4: Review and Discussion In the last module we will have a short discussion and discuss exactly what occurred. We will also go over a number of questions to test your knowledge. Agenda Review Discussion \u2013 10 min Questions \u2013 10 min Cleanup \u2013 5 min Architecture Overview Below is a diagram of the overall workshop setup: What is Really Going On? In Module 1 of the workshop you setup the initial components of your infrastructure including detective controls such as GuardDuty, Inspector, SecurityHub as well as simple notification and remediation pipeline. Some of the steps required manual configuration but you also ran a CloudFormation template which setup some of the components. In Module 2 you launched a second CloudFormation template that initiated the attack simulated by this workshop. The CloudFormation template created two EC2 instances. One instance (named Malicious Host ) had an EIP attached to it that was added to your GuardDuty custom threat list. Although the Malicious Host is in the same VPC as the other instance, for the sake of the scenario (and to prevent the need to submit a penetration testing request) we acted as if it is on the Internet and represented the attack's computer. The other instance (named Compromised Instance ) was your web server and it was taken over by the Malicious Host . In Module 3 you investigated the attack, remediated the damage, and setup some automated remediations for future attacks. Here is what occurred in the attack: There are two instances created by the Module 2 CloudFormation template. They are in the same VPC but different subnets. The Malicious Host represents the attacker which we pretend is on the Internet. The Elastic IP on the Malicious Host is in a custom threat list in GuardDuty. The other instance named Compromised Instance represents the web server that was lifted and shifted into AWS. Although company policy is that only key-based authentication should be enabled for SSH, at some point password authentication for SSH was enabled on the Compromised Instance . This misconfiguration is identified in the Inspector scan that is triggered from the GuardDuty finding. The Malicious Host performed a brute force SSH password attack against the Compromised Instance . The brute force attack is designed to be successful. GuardDuty Finding : UnauthorizedAccess:EC2/SSHBruteForce The SSH brute force attack was successful and the attacker was able to log in to the Compromised Instance . Successful login is confirmed in CloudWatch Logs (/threat-detection-wksp/var/log/secure). The EC2 Instance that is created in the Module 2 CloudFormation template disabled default encryption on the Data bucket. In addition the CloudFormation template made the Data bucket public. This is used for the Macie part of the investigation in Module 3. We pretend that the attacker made the bucket public and removed the default encryption from the bucket. Macie Alert : S3 Bucket IAM policy grants global read rights. The Compromised Instance also has a cron job that continuously pings the Malicious Host to generate a GuardDuty finding based off the custom threat list. GuardDuty Finding : UnauthorizedAccess:EC2/MaliciousIPCaller.Custom The API Calls that generated the API findings come from the Malicious Host . The calls use the temp creds from the IAM role for EC2 running on the Malicious Host . The GuardDuty findings are generated because the EIP attached to the Malicious Host is in a custom threat list. GuardDuty Finding : Recon:IAMUser/MaliciousIPCaller.Custom or GuardDuty Finding : UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom A number of CloudWatch Events Rules are evoked by the GuardDuty findings and then these trigger various services. CloudWatch Event Rule : The generic GuardDuty finding invokes a CloudWatch Event rule which triggers SNS to send an email. CloudWatch Event Rule : The generic Macie alert invokes a CloudWatch Event rule which triggers SNS to send an email. CloudWatch Event Rule : The SSH brute force attack finding invokes a CloudWatch Event rule which triggers a Lambda function to block the attacker IP address of the attacker via a NACL as well as a Lambda function that runs an Inspector scan on the EC2 instance. CloudWatch Event Rule : The Unauthorized Access Custom MaliciousIP finding invokes a CloudWatch Event rule which triggers a Lambda function to block the IP address of the attacker via a NACL. Cleanup In order to prevent charges to your account we recommend cleaning up the infrastructure that was created. If you plan to keep things running so you can examine the workshop a bit more please remember to do the cleanup when you are done. It is very easy to leave things running in an AWS account, forgot about it, and then accrue charges. If you are using this in an instructor led session, with the AWS Event Engine you do not need to run the cleanup steps If you are running this in your own account. You will need to manually delete some resources before you delete the CloudFormation stacks so please do the following steps in order. Delete the Inspector objects created for the workshop. Go to the Amazon Inspector console. Click on Assessment targets in the navigation pane on the left. Delete all that start with threat-detection-wksp . Delete the IAM Role for the compromised EC2 instance and the Service-Linked Role for Inspector (if you didn't already have this Role created). Go to AWS IAM console. Click on Roles Search for the role named threat-detection-wksp-compromised-ec2 . Click the check box next to it and click Delete . Repeat the steps above for the role named AWSServiceRoleForAmazonInspector . Delete all three S3 buckets created by the Module 1 CloudFormation template (the buckets that start with threat-detection-wksp and end with -data , -threatlist and -logs ) Go to Amazon S3 console. Click on the appropriate bucket. Click Delete Bucket . Copy and paste the name of the bucket (this is an extra verification that you actually want to delete the bucket). Repeat the steps above for all three buckets. Delete Module 1 and 2 CloudFormation stacks ( ThreatDetectionWksp-Env-Setup and ThreatDetectionWksp-Attacks ). Go to the AWS CloudFormation console. Select the appropriate stack. Select Action . Click Delete Stack . Repeat the steps above for each stack. You do not need to wait for the first stack to delete before you delete the second one. Delete the GuardDuty custom threat list and disable GuardDuty (if you didn't already have it configured before the workshop) Go to the Amazon GuardDuty console. Click on Lists on the left navigation. Click the X next to the threat list that starts with Custom-Threat-List . Click Settings in the navigation pane on the left navigation. Click the check box next to Disable . Click Save settings and then click Disable in the pop-up box. Disable AWS Security Hub Go to the AWS Security Hub console. Click on Settings on the left navigation. Click the General on the top navigation. Click Disable AWS Security Hub . Delete the manual CloudWatch Event Rule you created and the CloudWatch Logs that were generated. Go to the AWS CloudWatch console. Click on Rules in the navigation pane on the left. Click the radio button next threat-detection-wksp-guardduty-finding-maliciousip . Select Action and click Delete . Click on Logs in the navigation pane on the left. Click the radio button next to /aws/lambda/threat-detection-wksp-inspector-role-creation . Select Action and click Delete log group and then click Yes, Delete in the pop-up box. Repeat for: /aws/lambda/threat-detection-wksp-remediation-inspector /aws/lambda/threat-detection-wksp-remediation-nacl /threat-detection-wksp/var/log/secure Delete the SNS subscription that was created when you subscribed to SNS Topic. Go to the AWS SNS console. Click on Subscriptions on the left navigation. Select the check box next to the subscription that shows your e-mail as the Endpoint and has threat-detection-wksp in the Subscription ARN . Select Action and then click Delete subscriptions Disable Macie (if you didn't already have Macie enabled before the workshop). Go the Amazon Macie console. In the upper right-hand corner select the down arrow to the left of the Region and select Macie General Settings . Check the two boxes and click Disable Amazon Macie Finished! Congratulations on completing this workshop! This is the workshop's permanent home, so feel free to revisit as often as you'd like.","title":"Module 4: Discussion"},{"location":"04-review-and-discussion/#module-4-review-and-discussion","text":"In the last module we will have a short discussion and discuss exactly what occurred. We will also go over a number of questions to test your knowledge. Agenda Review Discussion \u2013 10 min Questions \u2013 10 min Cleanup \u2013 5 min","title":"Module 4: Review and Discussion"},{"location":"04-review-and-discussion/#architecture-overview","text":"Below is a diagram of the overall workshop setup:","title":"Architecture Overview"},{"location":"04-review-and-discussion/#what-is-really-going-on","text":"In Module 1 of the workshop you setup the initial components of your infrastructure including detective controls such as GuardDuty, Inspector, SecurityHub as well as simple notification and remediation pipeline. Some of the steps required manual configuration but you also ran a CloudFormation template which setup some of the components. In Module 2 you launched a second CloudFormation template that initiated the attack simulated by this workshop. The CloudFormation template created two EC2 instances. One instance (named Malicious Host ) had an EIP attached to it that was added to your GuardDuty custom threat list. Although the Malicious Host is in the same VPC as the other instance, for the sake of the scenario (and to prevent the need to submit a penetration testing request) we acted as if it is on the Internet and represented the attack's computer. The other instance (named Compromised Instance ) was your web server and it was taken over by the Malicious Host . In Module 3 you investigated the attack, remediated the damage, and setup some automated remediations for future attacks. Here is what occurred in the attack: There are two instances created by the Module 2 CloudFormation template. They are in the same VPC but different subnets. The Malicious Host represents the attacker which we pretend is on the Internet. The Elastic IP on the Malicious Host is in a custom threat list in GuardDuty. The other instance named Compromised Instance represents the web server that was lifted and shifted into AWS. Although company policy is that only key-based authentication should be enabled for SSH, at some point password authentication for SSH was enabled on the Compromised Instance . This misconfiguration is identified in the Inspector scan that is triggered from the GuardDuty finding. The Malicious Host performed a brute force SSH password attack against the Compromised Instance . The brute force attack is designed to be successful. GuardDuty Finding : UnauthorizedAccess:EC2/SSHBruteForce The SSH brute force attack was successful and the attacker was able to log in to the Compromised Instance . Successful login is confirmed in CloudWatch Logs (/threat-detection-wksp/var/log/secure). The EC2 Instance that is created in the Module 2 CloudFormation template disabled default encryption on the Data bucket. In addition the CloudFormation template made the Data bucket public. This is used for the Macie part of the investigation in Module 3. We pretend that the attacker made the bucket public and removed the default encryption from the bucket. Macie Alert : S3 Bucket IAM policy grants global read rights. The Compromised Instance also has a cron job that continuously pings the Malicious Host to generate a GuardDuty finding based off the custom threat list. GuardDuty Finding : UnauthorizedAccess:EC2/MaliciousIPCaller.Custom The API Calls that generated the API findings come from the Malicious Host . The calls use the temp creds from the IAM role for EC2 running on the Malicious Host . The GuardDuty findings are generated because the EIP attached to the Malicious Host is in a custom threat list. GuardDuty Finding : Recon:IAMUser/MaliciousIPCaller.Custom or GuardDuty Finding : UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom A number of CloudWatch Events Rules are evoked by the GuardDuty findings and then these trigger various services. CloudWatch Event Rule : The generic GuardDuty finding invokes a CloudWatch Event rule which triggers SNS to send an email. CloudWatch Event Rule : The generic Macie alert invokes a CloudWatch Event rule which triggers SNS to send an email. CloudWatch Event Rule : The SSH brute force attack finding invokes a CloudWatch Event rule which triggers a Lambda function to block the attacker IP address of the attacker via a NACL as well as a Lambda function that runs an Inspector scan on the EC2 instance. CloudWatch Event Rule : The Unauthorized Access Custom MaliciousIP finding invokes a CloudWatch Event rule which triggers a Lambda function to block the IP address of the attacker via a NACL.","title":"What is Really Going On?"},{"location":"04-review-and-discussion/#cleanup","text":"In order to prevent charges to your account we recommend cleaning up the infrastructure that was created. If you plan to keep things running so you can examine the workshop a bit more please remember to do the cleanup when you are done. It is very easy to leave things running in an AWS account, forgot about it, and then accrue charges. If you are using this in an instructor led session, with the AWS Event Engine you do not need to run the cleanup steps If you are running this in your own account. You will need to manually delete some resources before you delete the CloudFormation stacks so please do the following steps in order. Delete the Inspector objects created for the workshop. Go to the Amazon Inspector console. Click on Assessment targets in the navigation pane on the left. Delete all that start with threat-detection-wksp . Delete the IAM Role for the compromised EC2 instance and the Service-Linked Role for Inspector (if you didn't already have this Role created). Go to AWS IAM console. Click on Roles Search for the role named threat-detection-wksp-compromised-ec2 . Click the check box next to it and click Delete . Repeat the steps above for the role named AWSServiceRoleForAmazonInspector . Delete all three S3 buckets created by the Module 1 CloudFormation template (the buckets that start with threat-detection-wksp and end with -data , -threatlist and -logs ) Go to Amazon S3 console. Click on the appropriate bucket. Click Delete Bucket . Copy and paste the name of the bucket (this is an extra verification that you actually want to delete the bucket). Repeat the steps above for all three buckets. Delete Module 1 and 2 CloudFormation stacks ( ThreatDetectionWksp-Env-Setup and ThreatDetectionWksp-Attacks ). Go to the AWS CloudFormation console. Select the appropriate stack. Select Action . Click Delete Stack . Repeat the steps above for each stack. You do not need to wait for the first stack to delete before you delete the second one. Delete the GuardDuty custom threat list and disable GuardDuty (if you didn't already have it configured before the workshop) Go to the Amazon GuardDuty console. Click on Lists on the left navigation. Click the X next to the threat list that starts with Custom-Threat-List . Click Settings in the navigation pane on the left navigation. Click the check box next to Disable . Click Save settings and then click Disable in the pop-up box. Disable AWS Security Hub Go to the AWS Security Hub console. Click on Settings on the left navigation. Click the General on the top navigation. Click Disable AWS Security Hub . Delete the manual CloudWatch Event Rule you created and the CloudWatch Logs that were generated. Go to the AWS CloudWatch console. Click on Rules in the navigation pane on the left. Click the radio button next threat-detection-wksp-guardduty-finding-maliciousip . Select Action and click Delete . Click on Logs in the navigation pane on the left. Click the radio button next to /aws/lambda/threat-detection-wksp-inspector-role-creation . Select Action and click Delete log group and then click Yes, Delete in the pop-up box. Repeat for: /aws/lambda/threat-detection-wksp-remediation-inspector /aws/lambda/threat-detection-wksp-remediation-nacl /threat-detection-wksp/var/log/secure Delete the SNS subscription that was created when you subscribed to SNS Topic. Go to the AWS SNS console. Click on Subscriptions on the left navigation. Select the check box next to the subscription that shows your e-mail as the Endpoint and has threat-detection-wksp in the Subscription ARN . Select Action and then click Delete subscriptions Disable Macie (if you didn't already have Macie enabled before the workshop). Go the Amazon Macie console. In the upper right-hand corner select the down arrow to the left of the Region and select Macie General Settings . Check the two boxes and click Disable Amazon Macie","title":"Cleanup"},{"location":"04-review-and-discussion/#finished","text":"Congratulations on completing this workshop! This is the workshop's permanent home, so feel free to revisit as often as you'd like.","title":"Finished!"},{"location":"contribute/","text":"Contributing Guidelines Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution. Reporting Bugs/Feature Requests We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment Contributing via Pull Requests Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request . Finding contributions to work on Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start. Code of Conduct This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments. Security issue notifications If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue. Licensing See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Contributing"},{"location":"contribute/#contributing-guidelines","text":"Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution.","title":"Contributing Guidelines"},{"location":"contribute/#reporting-bugsfeature-requests","text":"We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment","title":"Reporting Bugs/Feature Requests"},{"location":"contribute/#contributing-via-pull-requests","text":"Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request .","title":"Contributing via Pull Requests"},{"location":"contribute/#finding-contributions-to-work-on","text":"Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.","title":"Finding contributions to work on"},{"location":"contribute/#code-of-conduct","text":"This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments.","title":"Code of Conduct"},{"location":"contribute/#security-issue-notifications","text":"If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue.","title":"Security issue notifications"},{"location":"contribute/#licensing","text":"See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Licensing"},{"location":"license/","text":"License MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"}]}